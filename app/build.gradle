plugins {
    id 'com.android.application'
}

//打包时间
def releasePackageTime() {
    return new Date().format("yyyyMMddhhmmss", TimeZone.getTimeZone("UTC"))
}
//获取local.properties的内容
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())


android {
    def versions = rootProject.ext.projectVersions

    compileSdkVersion versions.compileSdkV
    buildToolsVersion versions.buildToolsV

    defaultConfig {
        applicationId versions.applicationId
        minSdkVersion versions.minSdkV
        targetSdkVersion versions.targetSdkV
        versionCode versions.VCode
        versionName versions.VName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // 设置支持的so库架构
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding true
    }

    //第二种：为了保护签名文件，把它放在local.properties中并在版本库中排除
    // ，不把这些信息写入到版本库中（注意，此种方式签名文件中不能有中文）
    signingConfigs {
        releaseConfig {
            storeFile file(properties.getProperty("keystroe_storeFile"))
            storePassword properties.getProperty("keystroe_storePassword")
            keyAlias properties.getProperty("keystroe_keyAlias")
            keyPassword properties.getProperty("keystroe_keyPassword")
        }
        debugConfig {
            storeFile file(properties.getProperty("debug_keystroe_storeFile"))
            storePassword properties.getProperty("debug_keystroe_storePassword")
            keyAlias properties.getProperty("debug_keystroe_keyAlias")
            keyPassword properties.getProperty("debug_keystroe_keyPassword")
        }
    }

    sourceSets {
//        main {
//            jniLibs.srcDirs = ['libs']
//        }
        // young 这里新增指定prd环境的资源文件，也就是这里的文件会覆盖 res 的同名文件
        // 这里的 huawei.res.srcDirs 中的 huawei 是渠道名称
        // 然后这里指向的资源路径，是渠道特有的资源，总而言之，就是这里的资源会覆盖，正常 res 目录下的资源
        //放入渠道特有的 资源，需要替换对应的资源时，在 productFlavors 的渠道名称{} 里的 manifestPlaceholders
        //加上 替换的资源为那个名称
        DYTPir.res.srcDirs = ['src/main/res']
//        DYTPir.assets.dirs = ["src/main/assets"]
//        DYTPir.resources.srcDir('src/main/java')
        JMSPir.res.srcDirs = ['src/main/res-victor']
//        JMSPir.resources.srcDir('src/main/java-jms')
        VICTORPir.res.srcDirs = ['src/main/res-victor']
//        VICTORPir.resources.srcDir('src/main/java-victor')
    }

    flavorDimensions "theb"
    productFlavors {
//        //开发环境，点扬红外
        DYTPir {
//              // 每个环境包名不同
            dimension "theb"
            applicationId rootProject.ext.envInfo.DYT.applicationId
            versionCode rootProject.ext.envInfo.DYT.VCode
            versionName rootProject.ext.envInfo.DYT.VName
            // 动态添加 string.xml 字段；
            // 注意，这里是添加，在 string.xml 不能有这个字段，会重名！！！
//            resValue "string", "app_name", "web"
//            resValue "bool", "auto_updates", 'false'
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"DYTPir"'
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [CHANNEL_VALUE: "DYTPir"
                                    , app_name   : "DytSpectrumOwl"
                                    , app_icon   : "@mipmap/ic_launcher_dy_round"
                                    , APP_ID     : "1"
                                    , APP_Version: "2"
                                    , APP_Channel: "3"
                                    , isDebug    : "4"]
            //, app_icon   : "@mipmap/delete_all"
        }
        //精明鼠   NOYAFA
        JMSPir {
            // 每个环境包名不同
            dimension "theb"
            applicationId rootProject.ext.envInfo.JMS.applicationId
            versionCode rootProject.ext.envInfo.JMS.VCode
            versionName rootProject.ext.envInfo.JMS.VName
            // 动态添加 string.xml 字段；
            // 注意，这里是添加，在 string.xml 不能有这个字段，会重名！！！
//            resValue "string", "app_name", "huawei"
//            resValue "bool", "auto_updates", 'false'
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"JMSPir"'
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [CHANNEL_VALUE: "JMSPir"
                                    , app_name   : "NOYAFA"
                                    , app_icon   : "@mipmap/icon_launcher_jms"
                                    , APP_ID     : "1"
                                    , APP_Version: "2"
                                    , APP_Channel: "3"
                                    , isDebug    : "4"]
            // , app_icon   : "@mipmap/delete_all"
        }
//        //驿生胜利  VICTOR
        VICTORPir {
            // 每个环境包名不同
            dimension "theb"
            applicationId rootProject.ext.envInfo.VICTOR.applicationId
            versionCode rootProject.ext.envInfo.VICTOR.VCode
            versionName rootProject.ext.envInfo.VICTOR.VName
            // 动态添加 string.xml 字段；
            // 注意，这里是添加，在 string.xml 不能有这个字段，会重名！！！
//            resValue "string", "app_name", "xiaomi"
//            resValue "bool", "auto_updates", 'false'
            // 动态修改 常量 字段
            buildConfigField "String", "ENVIRONMENT", '"VICTORPir"'
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [CHANNEL_VALUE: "VICTORPir"
                                    , app_name   : "VICTOR"
                                    , app_icon   : "@mipmap/ic_launcher_victor"
                                    , APP_ID     : "1"
                                    , APP_Version: "2"
                                    , APP_Channel: "3"
                                    , isDebug    : "4"]
            //, app_icon   : "@mipmap/delete_all"
        }
    }

    //移除lint检测的error
    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            // 使用config签名
            signingConfig signingConfigs.debugConfig
            // debug模式下，显示log
            buildConfigField("boolean", "LOG_DEBUG", "true")

            //为已经存在的applicationId添加后缀
//            applicationIdSuffix ".debug"
            // 为版本名添加后缀
            versionNameSuffix "-debug"
            // 不开启混淆
            minifyEnabled false
            // 不开启ZipAlign优化
            zipAlignEnabled false
            // 不移除无用的resource文件
            shrinkResources false

            // 混淆文件位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            // 使用config签名
            signingConfig signingConfigs.releaseConfig
            // release模式下，不显示log
            buildConfigField("boolean", "LOG_DEBUG", "false")
            // 为版本名添加后缀
//            versionNameSuffix "-relase"
            // 不开启混淆
            minifyEnabled false
            // 开启ZipAlign优化     四字节对齐（zipAlignEnabled）：开启四字节对齐可以减少应用在运行时的内存消耗
            zipAlignEnabled false
            // 移除无用的resource文件
            shrinkResources false

            // 混淆文件位置
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
        // 批量打包
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def outputFile = output.outputFile
                variant
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                    def fileName = "DytSpectrumOwl"+ "_${variant.flavorName}_${variant.buildType.name}_v${variant.productFlavors[0].versionName}" +
//                            "_b${variant.productFlavors[0].versionCode}_${releasePackageTime()}.apk"
                    def fileName = "${variant.productFlavors[0].manifestPlaceholders.app_name}" + "_${variant.buildType.name}_v${variant.productFlavors[0].versionName}" +
                            "_b${variant.productFlavors[0].versionCode}_${releasePackageTime()}.apk"
                    outputFileName = fileName
                }
            }
        }
    }

}

dependencies {
    //2022年4月8日15:21:31 导入TinyC 的SDK库 arr
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    //依赖于Common  作为Lib
    implementation project(path: ':common')

    implementation project(path: ':CameraCommon')
    //引用 easyphotos 库
    implementation project(path: ':easyphotos')
    //引用第三方 pdf查看库
//    implementation project(path: ':library')

    implementation project(path: ':UvcConnect')
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'

    implementation "com.github.bumptech.glide:okhttp3-integration:4.12.0"
    //okhttp
    implementation("com.squareup.okhttp3:okhttp:4.9.3")

    //app-updater
    implementation 'com.github.jenly1314.AppUpdater:app-updater:1.1.2'
    //app-dialog
    implementation 'com.github.jenly1314.AppUpdater:app-dialog:1.1.2'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:crashreport:3.4.4'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    implementation 'com.tencent.bugly:nativecrashreport:3.9.2'
    //查看PDF文件 三方库
//    implementation 'com.tom-roush:pdfbox-android:2.0.23.0'
//    implementation 'es.voghdev.pdfviewpager:library:1.1.2'
//    compile 'com.github.barteksc:android-pdf-viewer:2.8.1'

}